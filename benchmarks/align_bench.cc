#include <string_view>

#include "benchmark/benchmark.h"
#include "lancet2/align.h"

static constexpr std::string_view reference =
    "CTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGAAACAGTCTCACTCTGTCACCAGGCTGGAGTGCAGTGGTGCGATCTCAACTCACTGCAACCTCCACTTCCCGGGTTCAAGCG"
    "ATTCTCCTGCCTCAGCCTCCCAAGTACTGGGATTACAGGCGCACGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGATGGTCT"
    "CGATCTCTTGACCTTGTGATCCACCTGCCTCAGCCTCCCAAAGTGCTGGGATTACAGGCATGAGTCACCACACCCAGCCACATTTCTTCTTTCTTCATAAATTTTTTCTGGGCC"
    "GGGAACAGTGGCTCACACCTATAATCCCAACACTTGGGAGGCCGAAGCAGGAAGACTTCTTGAAGCTAGGCATTCAAGACCAGCCTGGGCAAGAAAGTAAGACCCTGACCCTGT"
    "CTCAGCAAAAAATAAAAAAATAAAAATTAGCCAGATGTGGTGGCACGCACCTGTAGTCCCAGCTACTCAGGAGGCTGAAATGAGAGGATCTCTTGGGCCCAGAAGGTAGAGGCT"
    "GCAGTGAGC";

static constexpr std::string_view query =
    "CTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTGAAACAGTCTCACTCTGTCACCAGGCTGGAGTGCAGTGGTGCGATCTCAACTCACTGCAACCTCCACTTCCCGGGTTCAAGCG"
    "ATTCTCCTGCCTCAGCCTCCCAAGTAGCTGGGATTACAGGCGCACGCCACCACGCCCGGCTAATTTTTGTATTTTTAGTAGAGACGGGGTTTCACCATGTTGGCCAGGATGGTC"
    "TCGATCTCTTGACCTTGTGATCCACCTGCCTCAGCCTCCAAAGTGCTGGGATTACAGGCATGAGTCACCACACCCAGCCACATTTCTTCTTTCTTCATAAATTTTTTCTGGGCC"
    "GGGAACAGTGGCTCACACCTATAATCCCAACACTTTGGGAGGCCGAAGCAGGAAGACTTCTTGAAGCTAGGCATTCAAGACCAGCCTGGGCAAGAAAGTAAGACCCTGACCCTG"
    "TCTCAGCAAAAAATAAAAAAATAAAAATTAGCCAGATGTGGTGGCAGCACCTGTAGTCCCAGCTACTCAGGAGGCTGAAATGAGAGGATCTCTTGGGCCCAGAAGGTAGAGGCT"
    "GCAGTGAGC";

static void BM_LancetAlign(benchmark::State& state, std::string_view ref, std::string_view qry) {
  for (auto _ : state) {
    benchmark::DoNotOptimize(lancet2::Align(ref, qry));
  }
}

// NOLINTNEXTLINE
BENCHMARK_CAPTURE(BM_LancetAlign, BM_LancetAlign, reference, query)->Repetitions(10)->Unit(benchmark::kMillisecond);

// Define another benchmark
static void BM_EdlibAlign(benchmark::State& state, std::string_view ref, std::string_view qry) {
  for (auto _ : state) {
    benchmark::DoNotOptimize(lancet2::EdlibAlign(ref, qry));
  }
}

// NOLINTNEXTLINE
BENCHMARK_CAPTURE(BM_EdlibAlign, BM_EdlibAlign, reference, query)->Repetitions(10)->Unit(benchmark::kMillisecond);
