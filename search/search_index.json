{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Getting Started","text":""},{"location":"index.html#background","title":"Background","text":"<p>Lancet2 is a command line somatic variant caller (SNVs and InDels) for short read sequencing data implemented with modern C++. It performs joint multi-sample localized colored de-bruijn graph assembly for more accurate variant calls, especially InDels.</p> <p>In addition to variant calling accuracy and improved somatic filtering, Lancet2 has significant runtime performance improvements compared to Lancet1 (upto \u223c10x speedup and 50% less peak memory usage)</p>"},{"location":"index.html#installation","title":"Installation","text":""},{"location":"index.html#build-prerequisites","title":"Build prerequisites","text":"<ul> <li>Linux x86-64 system</li> <li>Git, Make</li> <li>GCC (12.x or greater)</li> <li>CMake (3.25 or greater)</li> <li>BZip2, LibLZMA</li> </ul>"},{"location":"index.html#build-commands","title":"Build commands","text":"<pre><code>git clone https://github.com/nygenome/Lancet2.git\ncd Lancet2 &amp;&amp; mkdir build &amp;&amp; cd build\ncmake -DCMAKE_BUILD_TYPE=Release .. &amp;&amp; make -j$(nproc)\n</code></pre>"},{"location":"index.html#static-binary","title":"Static binary","text":"<p>Note</p> <p>It is recommended to build Lancet2 from scratch on the target machine where processing is expected to happen for maximum runtime performance.</p> <p>If you have a Linux based operating system and a CPU that supports AVX2 instructions. The simplest way to use <code>Lancet2</code> is to download the binary from the latest available release. The binary from releases is static, with no dependencies and needs only executable permissions before it can be used.</p> <pre><code>chmod +x Lancet2\n./Lancet2 --help\n</code></pre>"},{"location":"index.html#docker-images","title":"Docker images","text":"<p>Note</p> <p>A CPU that supports the AVX512 instruction set is required to use the pre-built public docker images. Custom docker images for older CPUs can be built by the user by modifying the <code>BUILD_ARCH</code> argument in the Dockerfile.</p> <p>Public docker images hosted on Google Cloud are available for recent tagged releases.</p>"},{"location":"index.html#basic-usage","title":"Basic Usage","text":"<p>The following command demonstrates the basic usage of the Lancet2 variant calling pipeline for a tumor and normal bam file pair on chr22.</p> <pre><code>Lancet2 pipeline \\\n    --normal /path/to/normal.bam \\\n    --tumor /path/to/tumor.bam \\\n    --reference /path/to/reference.fasta \\\n    --region \"chr22\" --num-threads $(nproc) \\\n    --out-vcfgz /path/to/output.vcf.gz\n</code></pre> <p>See here for more information on how to score and filter somatic variants using explainable machine learning models.</p>"},{"location":"index.html#license","title":"License","text":"<p>Lancet2 is distributed under the BSD 3-Clause License.</p>"},{"location":"index.html#citing-lancet2","title":"Citing Lancet2","text":"<ul> <li>Lancet2: Improved and accelerated somatic variant calling with joint multi-sample local assembly graphs</li> <li>Somatic variant analysis of linked-reads sequencing data with Lancet</li> <li>Genome-wide somatic variant calling using localized colored de Bruijn graphs</li> </ul>"},{"location":"index.html#funding","title":"Funding","text":"<p>Informatics Technology for Cancer Research (ITCR) under the NCI U01 award 1U01CA253405-01A1.</p>"},{"location":"publications.html","title":"Publications","text":""},{"location":"publications.html#lancet2-improved-and-accelerated-somatic-variant-calling-with-joint-multi-sample-local-assembly-graphs","title":"Lancet2: Improved and accelerated somatic variant calling with joint multi-sample local assembly graphs","text":"<p>Abstract:</p> <p>Here, we present Lancet2, an open-source somatic variant caller designed to improve detection of small variants in short-read sequencing data. Lancet2 introduces significant enhancements, including: 1) Improved variant discovery and genotyping through partial order multiple sequence alignment of assembled haplotype contigs and re-alignment of sample reads to the best supporting allele. 2) Optimized somatic variant scoring with Explainable Machine Learning models leading to better somatic filtering throughout the sensitivity scale. 3) Integration with Sequence Tube Map for enhanced visualization of variants with aligned sample reads in graph space. When benchmarked against enhanced two-tech truth sets generated using high-coverage short-read (Illumina) and long-read (Oxford Nanopore) data from four well characterized matched tumor/normal cell lines, Lancet2 outperformed other industry-leading tools in variant calling performance, especially for InDels. In addition, significant runtime performance improvements compared to Lancet1 (~10x speedup and 50% less peak memory usage) and most other state of the art somatic variant callers (at least 2x speedup with 8 cores or more) make Lancet2 an ideal tool for accurate and efficient somatic variant calling.</p> <ul> <li>Authors \u2013 Rajeeva Lochan Musunuri, Bryan Zhu, Wayne E. Clarke, William Hooper, Timothy Chu, Jennifer Shelton, Andr\u00e9 Corvelo, Dickson Chung,                 Shreya Sundar, Adam M Novak, Benedict Paten, Michael C. Zody, Nicolas Robine, Giuseppe Narzisi</li> <li>Journal \u2013 bioRxiv, February 2025</li> </ul>"},{"location":"publications.html#somatic-variant-analysis-of-linked-reads-sequencing-data-with-lancet","title":"Somatic variant analysis of linked-reads sequencing data with Lancet","text":"<p>Abstract:</p> <p>We present a new version of the popular somatic variant caller, Lancet, that supports the analysis of linked-reads sequencing data. By seamlessly integrating barcodes and haplotype read assignments within the colored De Bruijn graph local-assembly framework, Lancet computes a barcode-aware coverage and identifies variants that disagree with the local haplotype structure.</p> <ul> <li>Authors \u2013 Rajeeva Musunuri, Kanika Arora, Andr\u00e9 Corvelo, Minita Shah, Jennifer Shelton, Michael C Zody, Giuseppe Narzisi.</li> <li>Journal \u2013 Bioinformatics, Volume 37, Issue 13, July 2021, Pages 1918\u20131919.</li> </ul>"},{"location":"publications.html#genome-wide-somatic-variant-calling-using-localized-colored-de-bruijn-graphs","title":"Genome-wide somatic variant calling using localized colored de Bruijn graphs","text":"<p>Abstract:</p> <p>Reliable detection of somatic variations is of critical importance in cancer research. Here we present Lancet, an accurate and sensitive somatic variant caller, which detects SNVs and indels by jointly analyzing reads from tumor and matched normal samples using colored de Bruijn graphs. We demonstrate, through extensive experimental comparison on synthetic and real whole-genome sequencing datasets, that Lancet has better accuracy, especially for indel detection, than widely used somatic callers, such as MuTect, MuTect2, LoFreq, Strelka, and Strelka2. Lancet features a reliable variant scoring system, which is essential for variant prioritization, and detects low-frequency mutations without sacrificing the sensitivity to call longer insertions and deletions empowered by the local-assembly engine. In addition to genome-wide analysis, Lancet allows inspection of somatic variants in graph space, which augments the traditional read alignment visualization to help confirm a variant of interest. Lancet is available as an open-source program at https://github.com/nygenome/lancet.</p> <ul> <li>Authors \u2013 Giuseppe Narzisi, Andr\u00e9 Corvelo, Kanika Arora, Ewa A. Bergmann, Minita Shah, Rajeeva Musunuri, Anne-Katrin Emde, Nicolas Robine, Vladimir Vacic &amp; Michael C. Zody.</li> <li>Journal \u2013 Nature, Communications Biology 1, Article Number: 20, March 2018.</li> </ul>"},{"location":"reference.html","title":"Reference","text":""},{"location":"reference.html#pipeline","title":"pipeline","text":"<p>The pipeline subcommand runs the entire Lancet variant calling pipeline on one (or) more region(s) of intereset. The full help text for the subcommand can be generated using the following command line</p> <pre><code>Lancet2 pipeline --help\n</code></pre>"},{"location":"reference.html#required","title":"Required","text":""},{"location":"reference.html#-r-reference","title":"<code>-r</code>,<code>--reference</code>","text":"<p>[PATH]</p> <p>Path to the reference FASTA file</p>"},{"location":"reference.html#-o-out-vcfgz","title":"<code>-o</code>,<code>--out-vcfgz</code>","text":"<p>[PATH]</p> <p>Output path to the compressed VCF file</p>"},{"location":"reference.html#datasets","title":"Datasets","text":""},{"location":"reference.html#-n-normal","title":"<code>-n</code>,<code>--normal</code>","text":"<p>[PATH...]</p> <p>Path to one (or) more normal BAM/CRAM file(s)</p>"},{"location":"reference.html#-t-tumor","title":"<code>-t</code>,<code>--tumor</code>","text":"<p>[PATH...]</p> <p>Path to one (or) more tumor BAM/CRAM file(s)</p>"},{"location":"reference.html#regions","title":"Regions","text":""},{"location":"reference.html#-r-region","title":"<code>-R</code>,<code>--region</code>","text":"<p>[SAMTOOLS_STYLE_REGION_STRING...]</p> <p>One (or) more regions (1-based both inclusive).</p>"},{"location":"reference.html#-b-bed-file","title":"<code>-b</code>,<code>--bed-file</code>","text":"<p>[PATH]</p> <p>Path to BED file with regions to process</p>"},{"location":"reference.html#-p-padding","title":"<code>-P</code>,<code>--padding</code>","text":"<p>[0-1000]. Default value \u2192 500</p> <p>Padding for both sides of all input regions</p>"},{"location":"reference.html#-p-pct-overlap","title":"<code>-p</code>,<code>--pct-overlap</code>","text":"<p>[20-80]. Default value \u2192 20</p> <p>Percent overlap between consecutive windows</p>"},{"location":"reference.html#-w-window-size","title":"<code>-w</code>,<code>--window-size</code>","text":"<p>[500-5000]. Default value \u2192 500</p> <p>Window size for micro-assembly and variant calling tasks</p>"},{"location":"reference.html#parameters","title":"Parameters","text":""},{"location":"reference.html#-t-num-threads","title":"<code>-T</code>,<code>--num-threads</code>","text":"<p>Number of additional async worker threads</p>"},{"location":"reference.html#-k-min-kmer","title":"<code>-k</code>,<code>--min-kmer</code>","text":"<p>Minimum kmer length to try for micro-assembly graph nodes</p>"},{"location":"reference.html#-k-max-kmer","title":"<code>-K</code>,<code>--max-kmer</code>","text":"<p>Maximum kmer length to try for micro-assembly graph nodes</p>"},{"location":"reference.html#-s-kmer-step","title":"<code>-s</code>,<code>--kmer-step</code>","text":"<p>Kmer step size length to try for micro-assembly graph nodes</p>"},{"location":"reference.html#-min-anchor-cov","title":"<code>--min-anchor-cov</code>","text":"<p>Minimum coverage for micro-assembly graph anchor nodes (source/sink)</p>"},{"location":"reference.html#-min-node-cov","title":"<code>--min-node-cov</code>","text":"<p>Minimum coverage for nodes in the micro-assembly graph</p>"},{"location":"reference.html#-max-sample-cov","title":"<code>--max-sample-cov</code>","text":"<p>Maximum per sample coverage before downsampling</p>"},{"location":"reference.html#flags","title":"Flags","text":""},{"location":"reference.html#-verbose","title":"<code>--verbose</code>","text":"<p>Turn on verbose logging</p>"},{"location":"reference.html#-extract-pairs","title":"<code>--extract-pairs</code>","text":"<p>Extract all useful read pairs</p>"},{"location":"reference.html#-no-active-region","title":"<code>--no-active-region</code>","text":"<p>Force assemble all windows</p>"},{"location":"reference.html#-no-contig-check","title":"<code>--no-contig-check</code>","text":"<p>Skip contig check with reference</p>"},{"location":"reference.html#optional","title":"Optional","text":""},{"location":"reference.html#-graphs-dir","title":"<code>--graphs-dir</code>","text":"<p>Output directory to write per window graphs in DOT and GFA format. Must be a non-existing directory path that will be created.</p>"},{"location":"blog/index.html","title":"Blog","text":""},{"location":"guides/custom_visualization.html","title":"Custom Visualization","text":"<p>For each window being processed, Lancet2 can optionally serialize two types of graphs that are generated during the variant calling process. This can be enabled by passing a non-existing directory to the <code>--graphs-dir</code> flag to write per window serialized graphs in the directory.</p> <ol> <li> <p>the kmer-based colored de-bruijn overlap graph after the cleaning/pruning steps of the assembly    process serialized as <code>DOT</code> formatted graphviz files. One <code>DOT</code> file    is generated for every strongly connected component for each window.</p> </li> <li> <p>the sequence graph generated from the multiple sequence alignment of all the assembled contigs    from the de-bruijn graph assembly serialized as <code>GFA</code> formatted files.</p> </li> </ol> <pre><code>Lancet2 pipeline --reference ref.fasta \\\n    --tumor tumor.bam --normal normal.bam \\\n    --region \"chr22\" --graphs-dir output-graphs\n</code></pre> <p>The above command will create two directories named <code>dbg_graph</code> and <code>poa_graph</code> in the provided <code>output-graphs</code> directory.</p> <ul> <li> <p>In the <code>dbg_graph</code> directory, you will find the <code>DOT</code> files generated for each window \u2013   <code>dbg__${CHROM}_${START}_${END}__fully_pruned__k${KMER_SIZE}__comp${COMP_ID}.dot</code></p> </li> <li> <p>In the <code>poa_graph</code> directory, you will find the <code>GFA</code> files generated for each window \u2013   <code>msa__${CHROM}_${START}_${END}__c${COMP_ID}.gfa</code>   The <code>poa_graph</code> also contains a <code>FASTA</code> file with the raw multiple sequence alignment output.</p> </li> </ul> <p>Info</p> <p>If you are interested to further debug the de-bruijn graph assembly process, you can generate DOT files for the all the intermediate steps before the <code>fully_pruned</code> graph is generated, by re-compiling the Lancet2 binary in <code>Debug</code> mode using <code>-DCMAKE_BUILD_TYPE=Debug</code> instead of <code>-DCMAKE_BUILD_TYPE=Release</code> in the cmake step.</p> <p>The intermediate states that can be inspected in their order of generation are as follows \u2013 <code>low_cov_removal1</code>, <code>found_ref_anchors</code>, <code>compression1</code>, <code>low_cov_removal2</code>, <code>compression2</code>, <code>short_tip_removal</code>.</p>"},{"location":"guides/custom_visualization.html#inspecting-dot-formatted-assembly-graphs","title":"Inspecting <code>DOT</code> formatted assembly graphs","text":"<p>The <code>DOT</code> files can be rendered in the pdf format using the dot utility available in the graphviz visualization software package. The <code>DOT</code> file can also be exported to various other output formats with the dot utility tool.</p> <pre><code>dot -Tpdf -o example_file.pdf example_file.dot\n</code></pre> <p>The above command will create a example_file.pdf file that shows the de-bruijn assembly graph.</p> <p>Shown below are the renderings of the de-bruijn assembly graph through all of it's intermediate states (can only be visualized in <code>Debug</code> mode Lancet2 binary. ideal for small regions.).</p> <p>Note</p> <p>Only the <code>fully_pruned</code> graph will be serialized when the standard <code>Release</code> build is used. The remaining 6 other states can only be visualized in the <code>Debug</code> build of Lancet2. The <code>Debug</code> build is much slower than the standard <code>Release</code> build and is only recommended to be used on small regions for inspection.</p>"},{"location":"guides/custom_visualization.html#low_cov_removal1","title":"<code>low_cov_removal1</code>","text":""},{"location":"guides/custom_visualization.html#found_ref_anchors","title":"<code>found_ref_anchors</code>","text":""},{"location":"guides/custom_visualization.html#compression1","title":"<code>compression1</code>","text":""},{"location":"guides/custom_visualization.html#low_cov_removal2","title":"<code>low_cov_removal2</code>","text":""},{"location":"guides/custom_visualization.html#compression2","title":"<code>compression2</code>","text":""},{"location":"guides/custom_visualization.html#short_tip_removal","title":"<code>short_tip_removal</code>","text":""},{"location":"guides/custom_visualization.html#fully_pruned","title":"<code>fully_pruned</code>","text":""},{"location":"guides/custom_visualization.html#inspecting-gfa-formatted-sequence-graphs","title":"Inspecting <code>GFA</code> formatted sequence graphs","text":"<p>The generated <code>GFA</code> files can be visualized in Bandage or BandageNG.</p> <p>The GFA file generated by Lancet2 is chopped i.e the nodes are in their decomposed form. They need to be unchopped using the <code>vg toolkit</code>, before they can be visualized or used in other downstream processes. Below is a command to unchop the Lancet2 GFA graph.</p> <pre><code>vg mod --unchop ${INPUT_GFA} &gt; ${OUTPUT_GFA}\n</code></pre>"},{"location":"guides/custom_visualization.html#bandageng","title":"BandageNG","text":"<p>The image above shows a screenshot of an unchopped Lancet2 sequence graph in <code>GFA</code> format visualized using the BandageNG toolkit.</p>"},{"location":"guides/custom_visualization.html#sequence-tube-map","title":"Sequence Tube Map","text":"<p>Lancet2 addresses the longstanding challenge of visualizing variants along with supporting reads from multiple samples in graph space. Users can easily load the unchopped <code>GFA</code> formatted graphs into the Sequence Tube Map environment allowing somatic variants' visualization along with their supporting read alignments from multiple samples.</p> <p>The following steps describe the workflow to visualize Lancet2 variants of interest in graph space using the Sequence Tube Map framework.</p> <ol> <li> <p>Install prerequisite tools \u2013 Lancet2 (https://github.com/nygenome/Lancet2), samtools, bcftools, vg version 1.59.0, and jq, and ensure that they are available as commands that can be executed in the environment PATH.</p> </li> <li> <p>Install Sequence Tube Map (https://github.com/vgteam/sequenceTubeMap) version 0452ecb82d057372e359a9b456d789336e5ab8a1.</p> </li> <li> <p>Use the Lancet2\u2019s prep_stm_viz.sh script to run Lancet2 on a small set of variants of interest that need to be    visualized in Sequence Tube Map. The script will run Lancet2 using the --graph-dir flag to generate GFA formatted    sequence graphs for each variant of interest. Local VG graphs and indices required to load the sample reads along    with the Lancet2 graph are then constructed enabling simplified use with \u201ccustom\u201d data option in Sequence Tube Map interface.</p> </li> <li> <p>After running the Sequence Tube Map Server as detailed in the Tube Map Readme, set \u201cData\u201d to \u201ccustom\u201d and \u201cBED file\u201d    to \u201cindex.bed\u201d. Pick a \u201cRegion\u201d(or variant) of interest and hit \u201cGo\u201d to visualize.</p> </li> </ol>"},{"location":"guides/custom_visualization.html#demo-sequence-tube-map-server","title":"Demo Sequence Tube Map server","text":"<p>Sequence Tube Map demo server containing somatic variants from COLO829 tumor/normal pair sample can be found at this link \u2013 https://shorturl.at/JQZsy</p>"},{"location":"guides/scoring_somatic_variants.html","title":"Scoring Somatic Variants","text":""},{"location":"guides/scoring_somatic_variants.html#setup-installation","title":"Setup &amp; Installation","text":"<p>The <code>score_variants.py</code> python script requires <code>Python 3.x</code> and some additional dependencies which are ideally installed using a virtual environment.</p> <pre><code>python3 -m venv --upgrade-deps pyenv\n./pyenv/bin/pip install numpy==1.26.4 tqdm==4.66.2 pysam==0.22.0 interpret-core==0.5.1\n</code></pre> <p>The explainable somatic machine learning model (<code>somatic_ebm.lancet_6ef7ba445a.v1.pkl</code>) is also needed to run the <code>score_variants.py</code> script.</p>"},{"location":"guides/scoring_somatic_variants.html#usage","title":"Usage","text":"<pre><code>./pyenv/bin/python3 score_variants.py \\\n    lancet2_output.vcf.gz somatic_ebm.lancet_6ef7ba445a.v1.pkl \\\n    &gt; lancet2_output.somatic_scoring.vcf\n</code></pre> <p>The <code>PASS</code> somatic variants can then be filtered from the scored VCF as follows.</p> <pre><code>bcftools view -f PASS -Oz -o lancet2_output.somatic_scoring.PASS.vcf.gz \\\n    lancet2_output.somatic_scoring.vcf\n</code></pre>"},{"location":"guides/targeted_analysis.html","title":"Targeted Analysis","text":"<p>Lancet can be run on exome/panel data by providing a preselected list of regions along the genome with a BED file. The BED file is a tab delimited text file which must contain at least three columns in the following order: - First column indicates the chromosome of the desired region to analyze - Second and Third columns are the start and end positions of the region respectively.</p> <p><code>sample.bed</code></p> <pre><code>chr1   56091000    56092000\nchr5   37281200    37291200\nchr8   11200000    11300000\n</code></pre> <p>In the example above the <code>sample.bed</code> file can be used to call variants in chromosomes 1, 5, and 8 from positions 56091000-56092000, 37281200-37291200, and 11200000-11300000 respectively using the following command:</p> <pre><code>Lancet2 pipeline --reference ref.fasta \\\n    --tumor tumor.bam --normal normal.bam \\\n    --bed-file sample.bed --out-vcfgz output.vcf.gz\n</code></pre> <p>Note</p> <p>Chromosome names in the BED file must match the chromosome names present in the reference FASTA and BAM/CRAM files. Though it is not recommened, you can use the <code>--no-contig-check</code> flag to force ignore this check.</p>"},{"location":"guides/wgs_analysis.html","title":"Whole Genome Analysis","text":"<p>For whole-genome sequencing studies it is highly recommended to split the analysis by chromosome and then merge the results. Splitting the work by chromosome will reduce overall runtime requirements to analyze whole-genome data.</p> <pre><code>NUM_CORES=64\n\nfor chrom in $(head -24 GRCh38.fasta.fai | cut -f1 | tr '\\n' ' ')\ndo\nqsub -N \"Lancet2_${chrom}\" -cwd -pe smp \"${NUM_CORES}\" -j y -b y \\\n\"Lancet2 pipeline --threads ${NUM_CORES} \\\n    --normal normal.bam --tumor tumor.bam \\\n    --reference GRCh38.fasta --region ${chrom} \\\n    --out-vcfgz output.${chrom}.vcf.gz\"\ndone\n\n# merge per chromosome VCF files\n</code></pre> <p>The previous command shows an example submission of multiple parallel lancet jobs, one for each human chromosome, to the Sun Grid Engine queuing system.</p>"}]}